apply plugin: 'java-library'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'com.vanniktech.maven.publish'

applyOsgi(
  // MANIFEST.MF, including OSGi bnd instructions.
  // We export retrofit2.internal for our own modules use.
  // The packages of all optional dependencies must be explicitly specified.
  // kotlinx.coroutines is optional for now because there is no OSGi metadata available
  // and it's only necessary when kotlin is used
  '''
  Export-Package: \
  retrofit2,\
  retrofit2.http,\
  retrofit2.internal;retrofitinternal=true;mandatory:=retrofitinternal
  Import-Package: \
  android.*;resolution:=optional,\
  kotlinx.coroutines.*;resolution:=optional,\
  *
  Automatic-Module-Name: retrofit2
  Bundle-SymbolicName: com.squareup.retrofit2
  '''
)

// Expose OSGi jars to the test environment.
configurations {
  osgiTestDeploy
}

def copyOsgiTestDeployment = tasks.register('copyOsgiTestDeployment', Copy) {
  from configurations.osgiTestDeploy
  into "${buildDir}/resources/test/retrofit2/osgi/deployments"
}
tasks.named('test') {
  dependsOn(copyOsgiTestDeployment)
}

dependencies {
  api libs.okhttp

  compileOnly libs.android
  compileOnly libs.kotlinStdLib
  compileOnly libs.kotlinCoroutines

  compileOnly libs.animalSnifferAnnotations
  compileOnly libs.findBugsAnnotations

  testImplementation projects.retrofit.testHelpers
  testImplementation libs.junit
  testImplementation libs.assertj
  testImplementation libs.guava
  testImplementation libs.mockwebserver
  testImplementation libs.kotlinStdLib
  testImplementation libs.kotlinCoroutines
  testImplementation libs.bndResolve
  osgiTestDeploy libs.equinox
  osgiTestDeploy libs.kotlinOsgi
  osgiTestDeploy projects.retrofitAdapters.guava
  osgiTestDeploy projects.retrofitAdapters.java8
  osgiTestDeploy projects.retrofitAdapters.rxjava
  osgiTestDeploy projects.retrofitAdapters.rxjava2
  osgiTestDeploy projects.retrofitAdapters.rxjava3
  osgiTestDeploy projects.retrofitAdapters.scala
  osgiTestDeploy projects.retrofitConverters.gson
  osgiTestDeploy projects.retrofitConverters.jackson
  osgiTestDeploy projects.retrofitConverters.jaxb
  osgiTestDeploy projects.retrofitConverters.protobuf
  osgiTestDeploy projects.retrofitConverters.scalars
}

jar {
  manifest {
    attributes 'Automatic-Module-Name': 'retrofit2'
  }
}

// Create a test task for each supported JDK.
(8..19).each { majorVersion ->
  def jdkTest = tasks.register("testJdk$majorVersion", Test) {
    javaLauncher = javaToolchains.launcherFor {
      languageVersion = JavaLanguageVersion.of(majorVersion)
      vendor = JvmVendorSpec.AZUL
    }

    description = "Runs the test suite on JDK $majorVersion"
    group = LifecycleBasePlugin.VERIFICATION_GROUP

    // Copy inputs from normal Test task.
    def testTask = tasks.getByName("test")
    classpath = testTask.classpath
    testClassesDirs = testTask.testClassesDirs
  }
  tasks.named("check").configure {
    dependsOn(jdkTest)
  }
}
